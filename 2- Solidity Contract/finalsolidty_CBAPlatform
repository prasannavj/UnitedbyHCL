
pragma solidity ^0.4.11;

import './IERC20.sol';
import './SafeMath.sol';

contract CBACoinPlatform is IERC20 {

    using SafeMath for uint256;
    

    
    string public constant symbol = "CBA";
    string public constant name = "CBA Coin";
    uint8 public constant decimal = 3;
    
    uint public constant RATE = 2000;
    // 1 ether = 2000 CBA coins.
    // 5 billion initial token for startups.
    // total sale - 5billion / 2000 = 2.5 million ether
    // 1 ether ~ AUD 240 = 2.5 * 240 = AUD 600 Million sale..
    
    uint256 public _totalsupply = 5000000000;
    
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    
    address public owner;
    
    function CBACoinPlatform() {
        
        owner = msg.sender;
        balances[msg.sender] = _totalsupply.mul(1 ether);
    }
    
    function createTokens() payable {
        
        require( msg.value > 0);
        uint256 tokens = msg.value * RATE;
        
        balances[msg.sender] = balances[msg.sender].add(tokens);
        balances[owner] = balances[owner].sub(tokens);
        owner.transfer(msg.value);
       
        
    }
    
    function() payable {
        
        createTokens();
    }
    
    function totalSupply() constant returns(uint256 totalSupply1) {
        
            return _totalsupply;
    }
    
    //for getting the token balance.
    function balanceOf(address _owner) constant returns (uint256 balance) {
        
        return balances[_owner];
    }
    
    function transfer(address _to,uint256 _value) returns (bool success) {
        require(
                balances[msg.sender] >= _value && _value >0 );
            balances[msg.sender] = balances[msg.sender].sub(_value);
            balances[_to] = balances[_to].add(_value);
            Transfer(msg.sender, _to, _value);
            return true;
    }
    
    function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {
        require(
                allowed[_from][msg.sender] >= _value &&
                balances[msg.sender] >= _value && _value >0 );
            balances[msg.sender] = balances[msg.sender].sub(_value);
            balances[_to] = balances[_to].add(_value);
            Transfer(msg.sender, _to, _value);
            return true;
    }
    
    
    function approve(address _spender, uint256 _value) returns (bool) {
        
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender,_spender,_value);
        
    }
    
     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {

        return allowed[_owner][_spender];
    }
     
    
    //safemath overflow and underflow attaks are possible
    
    
    
}